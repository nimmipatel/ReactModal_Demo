{"version":3,"sources":["Survey/FeedbackForm.jsx","modal/Modal.js","modal-component/ModalContainer.js","App.js","serviceWorker.js","index.js"],"names":["FeedbackForm","props","handleMessage","event","iframe","document","getElementById","undefined","origin","console","log","data","style","height","width","handleClick","setInterval","elem","activeElement","tagName","alert","clearInterval","ResizeToContent","my_frame","content_width","contentWindow","documentElement","scrollWidth","content_height","scrollHeight","state","displaySurvey","window","addEventListener","this","bind","attachEvent","frame","maxW","minW","FrameH","setTimeout","dispatchChange","innerHTML","setState","id","borderWidth","display","src","customerId","React","Component","Modal","setAppElement","ModalOverlay","isOpen","show","contentLabel","className","overlayClassName","aria-modal","aria-label","close","exit","contactId","assessmentId","date","recordformId","activitytype","type","onClick","value","ModalContainer","handleShowModal","exampledata","toggleShowModal","showModal","exampleClick","map","example","i","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6982234e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport class FeedbackForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            displaySurvey: this.props.displaySurvey\r\n        }        \r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (window.addEventListener) {\r\n            window.addEventListener(\"message\", this.handleMessage.bind(this));\r\n        } else {\r\n            window.attachEvent(\"onmessage\", this.handleMessage.bind(this));\r\n        }\r\n\r\n        if (document.addEventListener) {\r\n            document.addEventListener(\"message\", this.handleMessage.bind(this));\r\n        } \r\n    }\r\n\r\n    handleMessage = (event) => {\r\n        let iframe = document.getElementById(\"mainframe\");\r\n\r\n        if (event !== undefined) {\r\n            if (event.origin !== \"https://nimmipatel.github.io/TestReview\") //\"http://localhost:55496\")\r\n            {\r\n                console.log(\"The message came from some site we don't know. We're not processing it.\");\r\n                return;\r\n            }\r\n\r\n\r\n            var dataFromChildIframe = event.data;\r\n\r\n            if (iframe !== null) {\r\n                iframe.style.height = '20pt';\r\n                iframe.style.width = '280pt';\r\n            }\r\n        }\r\n    };\r\n\r\n    handleClick = () => {\r\n        setInterval(() => {\r\n            var elem = document.activeElement;\r\n            if (elem && elem.tagName === 'IFRAME') {\r\n                alert('Clicked');\r\n                clearInterval(this.handleClick());\r\n            }\r\n        }, 100);\r\n    };\r\n\r\n    AdjustIFrame() {\r\n        let frame = document.getElementById(\"mainframe\");\r\n        if (frame !== null) {\r\n            let maxW = frame.scrollWidth;\r\n            let minW = maxW;\r\n            let FrameH = 50; //IFrame starting height\r\n            frame.style.height = FrameH + \"px\"\r\n\r\n            while (minW === maxW) {\r\n                FrameH = FrameH + 100; //Increment\r\n                frame.style.height = FrameH + \"px\";\r\n                minW = frame.scrollWidth;\r\n            }\r\n        }\r\n    };\r\n\r\n    ResizeToContent = () => {\r\n        setInterval(() => {\r\n            //var my_frame = document.activeElement;\r\n            var my_frame = document.getElementById(\"mainframe\");\r\n            if (my_frame && my_frame.tagName === 'IFRAME') {\r\n                //var my_frame = document.getElementById(\"mainframe\");\r\n                if (my_frame !== null) {\r\n                    var content_width = my_frame.contentWindow.document.documentElement.scrollWidth;\r\n                    var content_height = my_frame.contentWindow.document.documentElement.scrollHeight;\r\n\r\n                    my_frame.style.width = content_width + 'px';\r\n                    my_frame.style.height = content_height + 'px';\r\n                }\r\n                clearInterval(this.handleClick());\r\n            }\r\n        }, 100);\r\n    };\r\n\r\n    ResizeToContent1() {\r\n        var my_frame = document.getElementById(\"mainframe\");\r\n        if (my_frame !== null) {\r\n            var content_width = my_frame.contentWindow.document.documentElement.scrollWidth;\r\n            var content_height = my_frame.contentWindow.document.documentElement.scrollHeight;\r\n\r\n            my_frame.style.width = content_width + 'px';\r\n            my_frame.style.height = content_height + 'px';\r\n        }\r\n    }\r\n\r\n    unloadHandler() {\r\n        // Timeout needed because the URL changes immediately after\r\n        // the `unload` event is dispatched.\r\n        setTimeout(this.dispatchChange(), 0);\r\n    };\r\n\r\n    hideSurvey() {\r\n        let iframe = document.getElementById(\"mainframe\");\r\n        if (iframe !== null) {\r\n\r\n            if (iframe.innerHTML === \"\") {\r\n                this.setState({\r\n                    displaySurvey: false\r\n                });\r\n            }\r\n\r\n                //iframe.addEventListener(\"onLoad\", this.unloadHandler());\r\n\r\n                // Just in case the change wasn't dispatched during the unload event...\r\n                //this.dispatchChange();\r\n        }\r\n    }    \r\n\r\n\r\n    render() {\r\n        const style = {\r\n            height: '360pt',\r\n            width: '280pt',\r\n            borderWidth: '0px',\r\n            display:'inline'\r\n        }\r\n        //let surveyUrl = \"https://www.surveymonkey.com/r/WSDHJRP?cust_id=\" + this.props.customerId + \"&cont_id=\" + this.props.contactId + \"&asst_id=\" + this.props.assessmentId + \"&date=\" + this.props.date + \"&recordform_id=\" + this.props.recordformId + \" &activitytype=\" + this.props.activitytype ;\r\n        let surveyUrl = \"https://nimmipatel.github.io/TestReview/SurveyComplete.html\"; //\"http://localhost:55496/SurveyComplete.html\";\r\n        return (\r\n            <div>\r\n                {this.state.displaySurvey ? (\r\n                    <iframe id=\"mainframe\" style={style} src={surveyUrl}></iframe>\r\n                ) : <div id=\"tf_commit_detail\"><>The record form has been committed : {this.props.customerId}</></div>}\r\n                \r\n            </div> \r\n        );\r\n    }\r\n}\r\n\r\nexport default FeedbackForm;","import React from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport FeedbackForm from \"../Survey/FeedbackForm\";\r\nimport \"C:/Users/patelN/RSInsightsDocs/ReactModal_Demo/ReactModal_Demo/ClientApp/src/Styles/TestFeedback.scss\"\r\nimport 'C:/Users/patelN/RSInsightsDocs/ReactModal_Demo/ReactModal_Demo/ClientApp/src/Styles/Login.scss';\r\nimport 'C:/Users/patelN/RSInsightsDocs/ReactModal_Demo/ReactModal_Demo/ClientApp/src/Styles/Clinical.scss';\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nexport class ModalOverlay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n    return (\r\n        <div>\r\n            <Modal isOpen={this.props.show} contentLabel=\"test-modal\" className=\"success-modal-450px\"\r\n                overlayClassName=\"Overlay\"\r\n                aria-modal=\"true\">\r\n\r\n            <div\r\n                className=\"font-rsi-h3 bold\" aria-label=\"Heading\"\r\n                style={{ \"marginTop\": \"32px\", \"marginBottom\": \"20px\" }}\r\n            >\r\n                <h1 id=\"tf_commit_hdr\">Commit Successful</h1> \r\n            </div>\r\n            <div id=\"tf_commit_detail\">\r\n                    <>The record form has been committed : {this.props.customerId}</>\r\n            </div>\r\n                <FeedbackForm\r\n                    close={this.props.exit}\r\n                    customerId={this.props.customerId}\r\n                    contactId={this.props.contactId}\r\n                    assessmentId={this.props.assessmentId}\r\n                    date={this.props.date}\r\n                    recordformId={this.props.recordformId}\r\n                    activitytype={this.props.activitytype}\r\n                    displaySurvey={true}\r\n            />\r\n            <div className=\"centered-buttons\">\r\n                <input\r\n                    type=\"button\"\r\n                    className=\"blue-button\"\r\n                    style={{ width: \"144px\", height: \"55px\" }}\r\n                    onClick={this.props.exit}\r\n                    value=\"Continue\"\r\n                />\r\n\r\n            </div>\r\n        </Modal>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default ModalOverlay;","import React from \"react\";\r\nimport ModalOverlay from \"../modal/Modal\";\r\n\r\nexport class ModalContainer extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n        showModal: false,\r\n        customerId: '',\r\n        contactId: '',\r\n        assessmentId: '',\r\n        date: '',\r\n        recordformId: '',\r\n        activitytype: ''\r\n    }\r\n}\r\n  handleShowModal = exampledata => {\r\n    this.setState(this.toggleShowModal);\r\n    if (this.state.showModal === false) {\r\n      this.setState({\r\n          customerId: exampledata.customerId,\r\n          contactId: exampledata.contactId,\r\n          assessmentId: exampledata.assessmentId,\r\n          date: exampledata.date,\r\n          recordformId: exampledata.recordformId,\r\n          activitytype: exampledata.activitytype\r\n      });\r\n    }\r\n  };\r\n\r\n  toggleShowModal = state => {\r\n    return {\r\n      showModal: !state.showModal\r\n    };\r\n  };\r\n\r\n  render() {\r\n      const examples = [{ 'customerId': '504321', 'contactId': '809', 'assessmentId': '6783', 'date': '28-July-2021', 'recordformId': '1', 'activitytype': 'rostering'},\r\n          { 'customerId': '504322', 'contactId': '810', 'assessmentId': '6783', 'date': '28-July-2021', 'recordformId': '2', 'activitytype': 'rostering'}]\r\n\r\n      let exampleClick = examples.map((example, i) => (\r\n          <button key={i} onClick={() => this.handleShowModal(example)} className=\"portfolio-box\">\r\n              {example.customerId}\r\n          </button>\r\n    ));\r\n    return (\r\n        <div>\r\n            <div>\r\n                {exampleClick}\r\n            </div>\r\n\r\n        <ModalOverlay\r\n            show={this.state.showModal}\r\n            exit={this.handleShowModal}\r\n            customerId={this.state.customerId}\r\n            contactId={this.state.contactId}\r\n            assessmentId={this.state.assessmentId}\r\n            date={this.state.date}\r\n            recordformId={this.state.recordformId}\r\n            activitytype={this.state.activitytype}\r\n        />\r\n        </div>\r\n    )\r\n  }\r\n}\r\nexport default ModalContainer;","import React from 'react';\r\nimport ModalContainer from './modal-component//ModalContainer'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ModalContainer/>\r\n      <header className=\"App-header\">\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <App />\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}